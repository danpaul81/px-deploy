# Configures cluster pairs between cluster and cluster 1

while : ; do
  token=$(kubectl exec -n portworx -it $(kubectl get pods -n portworx -lname=portworx --field-selector=status.phase=Running | tail -1 | cut -f 1 -d " ") -- /opt/pwx/bin/pxctl cluster token show 2>/dev/null | cut -f 3 -d " ")
  echo $token | grep -Eq '\w{128}'
  [ $? -eq 0 ] && break
  sleep 5
  echo waiting for portworx
done

UUID=$(kubectl get stc -n portworx -o jsonpath='{.items[].status.clusterUid}')
AWS_ACCESS_KEY=$(sed -n 's/aws_access_key_id[ =]*//p' /root/.aws/credentials 2>/dev/null | head -1)
AWS_SECRET_KEY=$(sed -n 's/aws_secret_access_key[ =]*//p' /root/.aws/credentials 2>/dev/null | head -1)

echo "Creating bucket '$DR_BUCKET' in region 'us-east-1', if it does not exist"
aws s3 mb s3://$DR_BUCKET --region us-east-1
BUCKET_REGION=$(aws s3api get-bucket-location --bucket $DR_BUCKET --output text)
# Region us-east-1 returns "None" instead of the region name
if [ "$BUCKET_REGION" = "None" ]; then
  BUCKET_REGION="us-east-1"
fi
echo "Bucket region: $BUCKET_REGION"
while : ; do
  kubectl exec $(kubectl get pod -n portworx -lname=portworx | tail -1 | cut -f 1 -d " ") -n portworx -c portworx -- /opt/pwx/bin/pxctl credentials delete clusterPair_$UUID
  kubectl exec $(kubectl get pod -n portworx -lname=portworx | tail -1 | cut -f 1 -d " ") -n portworx -c portworx -- /opt/pwx/bin/pxctl credentials create --provider s3 --s3-access-key $AWS_ACCESS_KEY --s3-secret-key $AWS_SECRET_KEY --s3-region $BUCKET_REGION --s3-endpoint s3.$BUCKET_REGION.amazonaws.com --s3-storage-class STANDARD --bucket $DR_BUCKET clusterPair_$UUID
  [ $? -eq 0 ] && break
  sleep 1
done
while : ; do
  ssh master-1 kubectl exec '$(kubectl get pod -n portworx -lname=portworx | tail -1 | cut -f 1 -d " ") -n portworx -c portworx -- /opt/pwx/bin/pxctl credentials create --provider s3 --s3-access-key '$AWS_ACCESS_KEY' --s3-secret-key '$AWS_SECRET_KEY' --s3-region '$BUCKET_REGION' --s3-endpoint s3.'$BUCKET_REGION'.amazonaws.com --s3-storage-class STANDARD --bucket '$DR_BUCKET' clusterPair_'$UUID
  [ $? -eq 0 ] && break
  sleep 1
done

if [ "$platform" = eks ] || [ "$platform" = ocp4 ]; then
  kubectl patch stc $(kubectl get stc -n portworx -o jsonpath='{.items[].metadata.name}') -n portworx --type='json' -p '[{"op":"add","path":"/metadata/annotations/portworx.io~1service-type","value":"LoadBalancer"}]'
  while : ;do
    host=$(kubectl get svc -n portworx portworx-service -o jsonpath='{.status.loadBalancer.ingress[].hostname}')
    [ "$host" ] && break
    sleep 1
  done
elif [ "$platform" = rancher ]; then
  host=$(kubectl get nodes -l node-role.kubernetes.io/worker=true -o json |jq -r '.items[0].status.addresses[] | select(.type=="InternalIP") | .address')
else
  host=node-$cluster-1
fi
storkctl generate clusterpair -n kube-system remotecluster-$cluster | sed "/insert_storage_options_here/c\    ip: $host\n    token: $token\n    mode: DisasterRecovery" >/var/tmp/cp.yaml

while : ; do
  cat /var/tmp/cp.yaml | ssh -oConnectTimeout=1 -oStrictHostKeyChecking=no master-1 kubectl apply -f -
  [ $? -eq 0 ] && break
  sleep 5
done
